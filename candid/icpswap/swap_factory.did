type Token = 
 record {
   address: text;
   standard: text;
 };
type SwapFactory = 
 service {
   addPasscode: (principal, Passcode) -> (Result_1);
   addPoolControllers: (principal, vec principal) -> ();
   batchAddPoolControllers: (vec principal, vec principal) -> ();
   batchRemovePoolControllers: (vec principal, vec principal) -> ();
   batchSetPoolAdmins: (vec principal, vec principal) -> ();
   clearRemovedPool: (principal) -> (text);
   createPool: (CreatePoolArgs) -> (Result_4);
   deletePasscode: (principal, Passcode) -> (Result_1);
   getCycleInfo: () -> (Result_8);
   getGovernanceCid: () -> (Result_7) query;
   getInitArgs: () -> (Result_6) query;
   getPasscodesByPrincipal: (principal) -> (Result_5) query;
   /// get pool by token addresses and fee.
   getPool: (GetPoolArgs) -> (Result_4) query;
   getPools: () -> (Result_2) query;
   getPrincipalPasscodes: () -> (Result_3) query;
   getRemovedPools: () -> (Result_2) query;
   getVersion: () -> (text) query;
   removePool: (GetPoolArgs) -> (text);
   removePoolControllers: (principal, vec principal) -> ();
   removePoolErrorTransferLog: (principal, nat, bool) -> (Result_1);
   restorePool: (principal) -> (text);
   setPoolAdmins: (principal, vec principal) -> ();
   setPoolAvailable: (principal, bool) -> ();
   upgradePoolTokenStandard: (principal, principal) -> (Result);
 };
type Result_8 = 
 variant {
   err: Error;
   ok: CycleInfo;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: opt principal;
 };
type Result_6 = 
 variant {
   err: Error;
   ok:
    record {
      feeReceiverCid: principal;
      governanceCid: opt principal;
      infoCid: principal;
      passcodeManagerCid: principal;
      trustedCanisterManagerCid: principal;
    };
 };
type Result_5 = 
 variant {
   err: Error;
   ok: vec Passcode;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: PoolData;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: vec record {
             principal;
             vec Passcode;
           };
 };
type Result_2 = 
 variant {
   err: Error;
   ok: vec PoolData;
 };
type Result_1 = 
 variant {
   err: Error;
   ok;
 };
type Result = 
 variant {
   err: Error;
   ok: text;
 };
type PoolData = 
 record {
   canisterId: principal;
   fee: nat;
   key: text;
   tickSpacing: int;
   token0: Token;
   token1: Token;
 };
type Passcode = 
 record {
   fee: nat;
   token0: principal;
   token1: principal;
 };
type GetPoolArgs = 
 record {
   fee: nat;
   token0: Token;
   token1: Token;
 };
type Error = 
 variant {
   CommonError;
   InsufficientFunds;
   InternalError: text;
   UnsupportedToken: text;
 };
type CycleInfo = 
 record {
   available: nat;
   balance: nat;
 };
type CreatePoolArgs = 
 record {
   fee: nat;
   sqrtPriceX96: text;
   token0: Token;
   token1: Token;
 };
service : (principal, principal, principal, principal, opt principal) -> SwapFactory
